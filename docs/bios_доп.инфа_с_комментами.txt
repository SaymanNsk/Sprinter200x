   -------
   --------
   ---   ---
   ---------
   --------
   ---
   --- уководство по программированию.
   ---

        Sprinter.
        Функции BIOS.

        Вызов функций производится через вход в TR-DOS 3D13h. Номер команды
задается в регистре C. Установленный на выходе флаг C означает завершение
работы функции с ошибкой.
        При работе части функций биоса необходимо что бы стек находился в
области 8000h..0BFFFh, так как они используют для своей работы переключение
страниц PAGE1 и PAGE3. Для устранения каких либо неприятностей связанных со
стеком его следует всегда устанавливать в этот диапазон при вызове функций
биоса Спринтера.

        Вызов функций биос так же может быть осуществлен через вход по
RST 18h при подключенном системном ПЗУ, а так же через RST 8 при
подключенном ОЗУ в нулевой банке путем установки на адрес RST 8 небольшой
программы, переключающейся в ПЗУ биоса

        Для подключения системного ПЗУ можно воспользоваться такой
последовательностью команд:
        DI
        LD A,0
        OUT (07Ch),A    ; после этого в 0-м адресе будет включена ПЗУ биоса
                        ; и программа может вызывать функции через RST 18h,
                        ; просто заменяя этим вызовом вызов CALL 3D13h
; * Обычные функции TR-DOS в этот момент не доступны
Что бы вернуться к обычному ПЗУ следует выполнить программу:
        LD A,0
        OUT (03Ch),A

Вызов из ОЗУ осуществляется через RST 8. При этом на адресе 8 должна
располагаться такая программа:
        PUSH AF
        LD A,0
        OUT (07Ch),A    ; в этом месте вместо ОЗУ подключится ПЗУ биоса и
                        ; программа уйдет в него.
        POP AF          ; На эту команду происходит возврат при таком
                        ; вызове биоса.
        RET
; Оптимизация кода в этом месте недопустима. Вместо LD A,0 можно установить
; две команды XOR A и DI
Далее вызов функций осуществляется аналогично RST 18h, но следует помнить,
что адресное пстранство 0000..3FFF во время работы биоса занято ПЗУ и в нем
не могут располагаться данные для работы функций.

Вызов новых функций через 3D13h автоматически отключает прерывания.
После исполнения функции программа должна включить их при необходимости.
Если необходимо что бы прерывания были включены все время, следует
использовать режим IM 2, с таблицей, стеком и обработчиком расположенным в
области 8000h..BFFFh и пользоваться вызовом через RST 18h или RST 8
В этом случае прерывания в биосе не отключаются.


        1. Работа с памятью.

EMM_FN0:                ; определение объемов ОЗУ
        LD C,0C0h       ; функция номер 0C0h
        CALL 3D13h      ; HL - общий объем памяти в страницах по 16kb
                        ; BC - объем свободной памяти в страницах по 16kb

EMM_FN1:                ; инициализация распределения памяти
                        ; стирается вся информация о выделенных ранее блоках
                        ; ОЗУ. Устанавливаются как занятые блоки с
                        ; системной информацией, а так же первые 256kb ОЗУ
        LD C,0C1h       ; функция номер 0C1h
        CALL 3D13h      ; выходных параметров нет

EMM_FN2:                ; выделение блока ОЗУ
        LD B,num_pages  ; запрашиваемое число страниц ОЗУ
        LD C,0C2h       ; номер функции
        CALL 3D13h      ; NC -> А - идентификатор блока
                        ; CF -> A=1 - нет памяти

EMM_FN3:                ; освободить блок ОЗУ
        LD A,id_blk     ; идентификатор блока
        LD C,0C3h       ; номер функции
        CALL 3D13h      ; NC - нормальное завершение
                        ; CF - неверный идентификатор блока
                        ; правильность идентификатора отслеживается не всегда

EMM_FN4:                ; получить физический номер страницы из блока
        LD A,id_blk     ; идентификатор блока
        LD B,page       ; логическая страница в блоке
        LD C,0C4h       ; номер функции
        CALL 3D13h      ; NC -> А - физический номер страницы
                        ; CF -> А=0 - нет такого блока, A=FF - конец блока

EMM_FN5:                ; получить список физических страниц блока
        LD A,id_blk     ; идентификатор блока
        LD HL,bufer     ; буфер длиной 256 байт для размещения списка
                        ; буфер должен быть длиной на единицу больше числа
                        ; страниц в блоке
        LD C,0C5h       ; номер функции
        CALL 3D13h      ; NC -> HL - тот же буфер, B - число страниц в блоке
                        ; данные по адресу HL - список физических страниц по
                        ; порядку. Список заканчивается байтом FF
                        ; CF -> неверный идентификатор блока. Старая
                        ; информация в буфере может быть затерта

EMM_FN6:                ; Получение адресов портов окон
        LD A,win_num    ; номер окна проецирования 0,1,2 или 3
        LD C,0C6h       ; номер функции
        CALL 3D13h      ; NC -> C - 8-мибитный адрес порта, B - номер
                        ; подключенной в данный момент страницы ОЗУ
                        ; CF -> ошибка номера окна
; Функция фактически не используется в данный момент. Адреса портов окон
; не изменялись с самого начала разработки компьютера и, надеюсь, не будут
; меняться. Для соблюдения приличий программисту следует хотя бы один раз
; вызвать эти функции и сравнить адреса портов с теми, что используются в
; программе и, если они не совпадают, выдать соответствующее предупреждение.
; В данный момент эти порты таковы: PAGE0=82h, PAGE1=0A2h, PAGE2=0C2h,
; PAGE3=0E2h

EMM_FN7:                ; получить следующую страницу блока по предыдущему
        LD A,page       ; физическая страница блока
        LD C,0C7h       ; номер функции
        CALL 3D13h      ; NC -> A - следующая физическая страница блока
                        ;       A=FF - индицирует конец блока
                        ; CF -> ошибка номера страницы
; Информация о распределении памяти хранится в виде RAM Allocation Table,
; похожей на дисковый FAT. Поэтому нахождение физического номера следующей
; страницы по предыдущему физическому номеру происходит значительно быстрее,
; чем поиск по увеличенному на единицу логическому номеру.

EMM_FN8:                ; слияние блоков
        LD A,id_blk1    ; блок номер 1
        LD B,id_blk2    ; блок номер 2
        LD C,9Eh        ; номер функции
        CALL 3D13h      ; NC -> A - блок результата
                        ; CF -> ошибка, неверный номер блока

EMM_FN9:                ; разделение блока
        LD A,id_blk1    ; блок
        LD B,len_blk    ; новая длина блока
        LD C,9Dh        ; номер функции
        CALL 3D13h      ; NC -> A - блок результата, B - блок остатка
                        ; CF -> ошибка, неверный номер блока


        2. Работа с блоками как с RAM-Disk-ами.

BLK_RD_WR:              ; чтение/запись из/в блок(а) памяти секторами
                        ; по 256 байт
        LD HL,bufer     ; адрес буфера данных
        LD DE,sector    ; абсолютный номер сектора
        LD B,sec_num    ; число секторов
        EX AF,AF'
        LD A,command    ; команда 0 - чтение, FF - запись
        EX AF,AF'
        LD A,id_blk     ; идентификатор блока
        LD C,0C8h       ; номер функции
        CALL 3D13h      ; NC -> нормальное завершение
                        ; CF -> ошибка идентификатора
; * функция на бета-тестировании...

BLK_TO_RAMD:            ; назначить блок памяти RAM-Disk-у
                        ; любой блок памяти может содержать данные
                        ; RAM-Disk-а в формате TR-DOS для подключения этих
                        ; данных в качестве диска и служит эта функция
        LD A,ram_disk   ; номер RAM-Disk-а 0..15 - соответствует
                        ; RAM-Disk-ам от e: до t:
        LD B,id_blk     ; идентификатор блока
        LD C,0C9h       ; номер функции
        CALL 3D13h      ; NC -> нормальное завершение
                        ; CF -> ошибка: неверный номер RAM-Disk-а или
                        ; RAM-Disk занят

RAMD_CLEAR:             ; освободить RAM-Disk
                        ; освобождение RAM-Disk-а не есть освобождение
                        ; блока ОЗУ. Это просто отключение блока ОЗУ от
                        ; RAM-Disk-а
        LD A,ram_disk   ; номер RAM-Disk-а - 0..15
        LD C,0CAh       ; номер функции
        CALL 3D13h      ; NC -> нормальное завершение, B - идентификатор
                        ; блока отключенного от RAM-Disk-а
                        ; CF -> ошибка: неверный номер RAM-Disk-а или
                        ; RAM-Disk был свободен

GET_RAMD_ST:            ; получение идентификатора блока, назначенного на
                        ; RAM-Disk
        LD A,ram_disk   ; номер RAM-Disk-а 0..15
        LD C,0CEh       ; номер функции
        CALL 3D13h      ; NC -> A - идентификатор блока.
                        ;       A=0 - блок не назначен.
                        ; CF -> ошибка номера RAM-Disk-а


        3. Управление назначением на дисководы
        Каждый из 4-х дисководов TR-DOS может быть переназначен для работы
с RAM-Disk-ами, винчестером и реальными дисководами.

RAMD_TO_DRV:            ; назначение RAM-Disk на дисковод.
        LD A,ram_disk   ; номер RAM-Disk-а
        LD B,drive      ; номер дисковода 0..3 - соответствует дисководам
                        ; A:, B:, C:, D:
        LD C,0CBh       ; номер функции
        CALL 3D13h      ; NC -> нормальние завершение
                        ; CF -> ошибка: неверный номер драйва или рамдиска

FDD_TO_DRV:             ; назначение реального дисковода
        LD А,disk_drive ; номер физического дисковода 0..3
        LD B,drive      ; номер драйва 0..3
                        ; Номер физического дисковода и номер драйва должны
                        ; совпадать, так как компьютер не имеет
                        ; электрической схемы переключения дисководов на
                        ; разные буквы. В будущих версиях железа, возможно,
                        ; это появится.
        LD C,0CCh       ; номер функции
        CALL 3D13h      ; NC -> нормальние завершение
                        ; CF -> ошибка: неверный номер драйва или дисковода

HDD_TO_DRV:             ; назначение винчестера на дисковод
        LD A,hdd_drive  ; Номер винчестера. Должен быть 0. В дальнейшем
                        ; будет иметь значения от 0 до 15 для подключения
                        ; различных разделов и master/slave
        LD B,drive      ; номер драйва 0..3
        LD C,0CDh       ; номер функции
        CALL 3D13h      ; NC -> нормальние завершение
                        ; CF -> ошибка: неверный номер драйва или винчестера

GET_DRV_ST:             ; получить тип назначения на драйв
        LD A,drive      ; номер драйва 0..3
        LD C,0CFh       ; номер функции
        CALL 3D13h      ; NC -> нормальние завершение. A - тип назначения
                        ; A=0..3 - назначен реальный дисковод A:, B:, C:, D:
                        ; A=4..19 - назначен RAM-Disk - A = ram_disk + 4
                        ; A=40h..4Fh - назначен винчестер (40h+hdd_drive)
                        ; CF -> ошибка номера драйва


        4. Функции управления железом и определение версии.

FN_VERSION:             ; выдача информации о версии биоса и железа
        LD HL,bufer     ; буфер, куда будет помещена ASCIIZ строка с
                        ; названием и номером версии, конец строки отмечен
                        ; нулем.
        LD C,0EFh       ; номер функции
        CALL 3D13h      ; NC -> HL - тот же буфер с записанной строкой.
                        ;       DE - версия биоса
                        ;       BC - версия железа
                        ;         BC=FFFF - not identifyed
                        ;         BC=FFFE - Sprinter-1
                        ;         BC=FFFD - Sprinter-2
                        ;         BC=FFFC - Spectrum + AY8910
                        ;         BC=FFFB - Game-1
                        ;         BC=FFFA - Video-1
                        ;         BC=FFF9 - DooM
                        ;         Иные значения BC - новые прошивки
                        ;       версия железа выдается только
                        ;       в биосах версий 1.16 и выше
                        ; CF -> ошибка. Очень старая версия, не имеющая
                        ; данной функции<<

SPRINTER_1:             ; переключение в конфигурацию Sprinter-1
        LD C,0F0h       ; номер функции
        CALL 3D13h      ; NC -> нормальное завершение
                        ; CF -> функция не исполнена, фатальная ошибка
                        ; машину следует перезапустить по RESET

SPRINTER_2:             ; переключение в конфигурацию Sprinter-2
        LD C,0F1h       ; номер функции
        CALL 3D13h      ; NC -> нормальное завершение
                        ; CF -> функция не исполнена, фатальная ошибка
                        ; машину следует перезапустить по RESET

SPRINTER_ALL:           ; переключение конфигурации пользователя
        LD A,page_cnf   ; страница с файлом прошивки для ПЛМ EPF10K10
                        ; страница не может иметь номер больше 127
                        ; Файл прошивки, естественно должен быть уже
                        ; загружен в эту страницу
        LD C,0F3h       ; номер функции
        CALL 3D13h      ; NC -> нормальние завершение
                        ; CF -> функция не исполнена, фатальная ошибка
                        ; машину следует перезапустить по RESET

; Перед исполнением функций SPRINTER_1, SPRINTER_2 и SPRINTER_ALL биос
; проверяет загруженную прошивку по идентификатору. Если требуемая
; прошивка совпадает с текущей, то операция перезагрузки ПЛМ не
; производится.
; Во время исполнения этих функций наблюдается сбой синхронизации монитора,
; так как в этот момент происходит изменение всей схемы компьютера и
; сигналы синхронизации монитора просто отсутствуют.

FN_SINC:                ; установка синхронизации, очистка режима экрана
                        ; функция может быть отнесена и к группе функций
                        ; вывода на экран, так как полностью очищает
                        ; страницы режима экрана. На всем экране остается
                        ; только бордер
        LD A,sinc_mode  ; режим синхронизации
                        ; A=0 режим по умолчанию - используется для очистки
                        ; страниц режима (отключения вывода всех окон)
                        ; A=1 режим Scorpion - 312 строк в экране,
                        ; положение INT-а, как в Scorpion-256
                        ; A=2 режим Pentagon - 320 строк в экране,
                        ; положение INT-a как в Pentagon-128
        LD C,0F2h       ; номер функции
        CALL 3D13h      ; NC -> нормальное завершение
                        ; CF -> неверный номер режима синхронизации
; изменение режима синхронизации может привести к временному сбою
; синхронизации монитора.

; DCP_FN0:              ; функция управления дешифратором портов.
;        LD C,0F4h      ; В данный момент не доделана
; Функция позволит открывать/закрывать дополнительные порты компьютера

SET_PORTS:              ; глобальная установка портов
        LD A,port_num   ; внутренний номер порта
                        ; F0..FF - страницы Scorpion 0..15, подключаемые в
                        ; адрес 0C000h, страница именно та, которая
                        ; подключена в данный момент через 7FFD,1FFD
                        ; E0=EXPANSION, Е1=TR-DOS, E2=BASIC-128, E3=BASIC-48
                        ; E4=EXPANSION',Е5=TR-DOS',E6=BASIC-128',E7=BASIC-48'
                        ; E8=RAM0, E9=RAM1, EA=RAM2, EB=SYS0, EC=CASH
                        ; ED,EE - reserv, EF=SYS1
                        ; C0=COPY_1FFD, C1=COPY_7FFD, C2=COPY_BRD, C3-reserv
                        ; C4-reserv, C5=COPY_V_MODE, C6=COPY_SYS, C7-reserv
                        ; C8..CF - альтернативный набор для C0..C7
                        ; D0..DF-reserv - доп. страницы для Pentagon-512
                        ; 80..BF-user_ports!
                        ; 00..7F-внешние порты, использовать не рекомендуется
        LD B,port_data  ; данные, записываемые в страницу
        LD C,0F8h       ; номер функции
        CALL 3D13h      ; B - предыдущее содержание порта

READ_PORTS:             ; глобальное чтение портов
        LD A,port_num   ; внутренний номер порта
        LD C,0F9h       ; номер функции
        CALL 3D13h      ; B - содержание порта

WRITE_PORTS:            ; глобальная запись портов
        LD A,port_num   ; внутренний номер порта
        LD B,data_port  ; записываемые данные
        LD C,0FАh       ; номер функции
        CALL 3D13h      ;

; Функции SET_PORTS, READ_PORTS и WRITE_PORTS позволяют иметь доступ
; к любым портам компьютера независимо от того, открыты они или нет.
; В данный момент функции недоступны и находятся в разработке
; С помощью этих функций будет возможно прочитать содержимое портов 1FFD и
; 7FFD, например, а так же установить нужные значения в закрытые системные
; порты. Порты User-а позволят эмулировать некоторые устройства,
; отсутствующие в Спринтере, а так же могут дать особый способ
; передачи данных между программами, минуя ОЗУ.

CMOS_RD:                ; читать из регистра CMOS
        LD C,0F6h       ; номер функции
        LD D,cmos_reg   ; номер регистра CMOS
        CALL 3D13h      ; NC - часы есть
                        ; CF - часов нет

CMOS_WR:                ; писать в регистр CMOS
        LD C,0F7h       ; номер функции
        LD D,cmos_reg   ; номер регистра CMOS
        CALL 3D13h      ; NC - часы есть
                        ; CF - часов нет
Функции CMOS_RD,CMOS_WR работают всегда. Если в машине нет микросхемы CMOS,
она эмулируется. Наличие микросхемы определяется функцие CMOS_TEST.

CMOS_TEST:              ; проверить наличие CMOS
        LD C,0F5h       ; номер функции
        CALL 3D13h      ; NC - часы есть
                        ; CF - часов нет


FN_TURBO:               ; функция управления турбо режимом.
        LD A,turbo_mode ; режим турбо: 2 - off, 3 - on
        LD C,08Fh       ; номер функции
        CALL 3D13h      ; NC -> исполнение
                        ; CF -> неверный режим турбо
; * переключение режима турбо может не произойти, если прошивка не
; поддерживает это переключение. При этом ошибки не происходит.

        5. Функции печати и управления режимом экрана.

WIN_OPEN:               ; функция открытия окна.
        LD IX,win_descriptor    ; описатель окна
;               IX - 32-хбайтовый описатель окна
;               (IX+0) - горизонтальный размер окна в знакоместах
;               (IX+1) - вертикальный размер в знакоместах
;               (IX+2) - положение окна по горизонтали на экране
;               (IX+3) - положение окна по вертикали на экране
;               (IX+4) - режим знакоместа
;                       bit4=1 - text_mode  bit4=0 - graf_mode
;                       bit5=0 - 16, bit5=1 - 8 точек в знакоместе
;                       graf_mode bit3..0 - не существенны
;                                 bit7..6 - номер палитры
;                       text_mode bit7..6,3..0 - номер знакогенератора
;                                 исключение: bit7..6=B"11" -> бордер
;               (IX+5) - дополнительный режим знакоместа
;                       bit0=1 - указывает на включение спектрумовской
;                               адресации экрана
;               (IX+6) - положение по X в поле графики (по знакоместам)
;               (IX+7) - положение по Y в поле графики (по знакоместам)
;                       разъяснения о положении в поле графики - ниже
;               (IX+8..31) - зарезервировано (переменные окна)
        LD E,win_flag   ; флаги окна
                        ; бит 0 указывает какую страницу режима включать
                        ; после исполнения функции
                        ; бит 4 указывает на какой странице режима
                        ; открывать окно
        LD HL,win_place ; HL - место на экране по знакоместам
                        ; (копия в IX+2,3), в новых версиях биоса значение
                        ; HL не существенно
        LD C,0B0h       ; номер функции
        CALL 3D13h      ; NC -> A - номер окна
                        ; CF -> ошибка слишком много окон
        LD (id_win),A   ; сохранить идентификатор окна

; * При открытии окна описатель копируется в системную страницу ОЗУ и
; программа может не сохранять его.
; ** В данный момент идентификатор окна всегда равен 0

; Видео-ОЗУ Спринтера можно представить как одно сплошное поле графики
; размером 1024 точки по горизонтали на 256 точек по вертикали
; Положение в поле графики показывает где будет находиться в этом поле
; верхний левый угол окна. Положение исчисляется в знакоместах. Т.е.
; Если указано положение по X - 2, по Y - 6, это означает, что верхний угол
; окна будет расположен по координатам X=16, Y=48 в поле графики видео-ОЗУ
; Таким образом, если, например, открыть два окна в разных местах, но с
; одинаковыми координатами в поле графики, на экране окажутся два
; идентичных окна, данные в которые будут попадать одновременно.

; Знакогенераторы текстовых режимов так же располагаются в видео-ОЗУ и
; имеют конкретные адреса в поле графики. При необходимости иметь на экране
; как графическое, так и текстовое изображение надо следить, что бы
; данные графических окон не попадали в поле графики, где расположены
; знакогенераторы

; При использовании какого либо знакогенератора, он занимает часть поля
; графики по координатам
; (координаты в знакоместах, т.е. в значениях байта IX+6 описателя окна)
; X = (8 * ( bit3..0 режима ))..(8 * ( bit3..0 режима ) + 7)
; По Y занимаются все положения.
; Таким образом, при использовании нескольких знакогенераторов сначала
; следует использовать знакогенераторы с номерами меняющимися в Bit7..6,
; так как они попадают в одни и те же координаты поля графики

; При открытии графических окон следует помнить, что в этот момент
; информация текстового экрана находящаяся в этом месте будет утеряна.
; При открытии текстового окна изменяется информация только в поле графики
; знакогенератора соответствующему этому текствовому экрану. Если эта
; информация и информация графического окна не пересекались, то при
; повторном открытии графического экрана, на нем автоматически
; восстановится графическая картинка

WIN_CLOSE:              ; закрытие окна
        LD A,(id_win)   ; идентификатор окна (пока должен быть 0)
        LD C,0B1h       ; номер функции
        CALL 3D13h      ; NC -> успешное завершение
                        ; CF -> ошибка - неверный идентификатор
                        ; Окно с номером 0 никогда не закрывается и попытка
                        ; закрытия приводит к ошибке


LP_OPEN_S:              ; Открытие стандартных окон.
        LD E,win_flag   ; флаги окна
                        ; bit 0 определяет страницу режима, которая будет
                        ; открыта после исполнения функции
        LD C,080h       ; номер функции
        LD B,win_type   ; тип открываемого окна
;               0 - спектрумовское окно 32x24
;               1 - текстовое окно 64x24
;               3 - текстовое окно 80x32
;               4 - спектрумовское окно, HL - положение окна
;               5 - текстовое окно 64x24, HL - положение окна
;               7 - текстовое окно 80x32, HL - положение окна
;               8 - графическое окно 0, HL - положение окна
;               9 - графическое окно 1, HL - положение окна
        LD HL,win_place ; положение окна для 4..9 типов
        CALL 3D13h      ; выполнить функцию
; ** Функция старая, использовать не рекомендуется.

; Далее, в функциях запоминания, восстановления, перемещения и стирания
; подразумеваются локальные окна в смысле "окно в окне". Идентификатор окна
; относится к глобальному окну, отнисительно которого адресуются локальные


WIN_COPY_WIN:           ; копирование данных текстового окна в память
                        ; запоминание окна
        LD A,(id_win)   ; идентификатор глобального окна (пока должен быть 0)
        LD H,ver_size   ; HL - размер локального окна вертикаль/горизонталь
        LD L,hor_size   ; размер в символах
        LD D,ver_place  ; DE - положение локального окна в глобальном окне
        LD E,hor_place  ; положение по горизонтали в символах
        LD IX,bufer     ; адрес буфера для запоминания данных локального окна
        EX AF,AF'
        LD A,bufer_page ; страница буфера для данных окна
        EX AF,AF'       ; адрес буфера указывается для окна 0C000h
                        ; если адрес указан с 8000h, номер страницы буфера
                        ; не действителен
        LD C,0B2h       ; номер функции
        CALL 3D13h      ; NC -> нормальное завершение
                        ; CF -> ошибка - неверный идентификатор окна
; при работе этой функции через RST 18h или RST 8, обязательна установка
; DI, так как функция пользуется стеком для ускорения своей работы.

WIN_RESTORE_WIN:        ; копирование данных из памяти в текстовое окно
                        ; восстановление окна
        LD A,(id_win)   ; идентификатор глобального окна (пока должен быть 0)
        LD H,ver_size   ; HL - размер локального окна вертикаль/горизонталь
        LD L,hor_size   ; размер в символах
        LD D,ver_place  ; DE - положение локального окна
        LD E,hor_place  ; положение по горизонтали в символах
        LD IX,bufer     ; адрес буфера данных для локального окна
        EX AF,AF'
        LD A,bufer_page ; страница буфера данных окна
        EX AF,AF'       ; адрес буфера указывается для окна 0C000h
                        ; если адрес указан с 8000h, номер страницы буфера
                        ; не действителен
        LD C,0B3h       ; номер функции
        CALL 3D13h      ; NC -> нормальное завершение
                        ; CF -> ошибка - неверный идентификатор окна
; при работе этой функции через RST 18h или RST 8, обязательна установка
; DI, так как функция пользуется стеком для ускорения работы.

; Данные для функций WIN_COPY_WIN и WIN_RESTORE_WIN имеют одинаковую
; структуру В данный момент эта структура похожа на структуру текстового
; экрана IBM, т.е. данные идут в формате  sym1,atr1,sym2,atr2,.. сплошным
; массивом. Сначала данные для первой строки, затем сразу для второй и т.д.

WIN_GET_SYM:            ; взять символ с экрана
        LD A,(id_win)   ; идентификатор окна (пока должен быть 0)
        LD DE,place     ; положение символа: D - вертикаль, E - горизонталь
        LD C,0B4h       ; номер функции
        CALL 3D13h      ; NC -> нормальное завершение
                        ; L - символ, H - атрибут, B - знакогенератор
                        ; CF -> ошибка неверный идентификатор окна


WIN_PUT_SYM:            ; положить символ на экран
        LD A,(id_win)   ; идентификатор окна (пока должен быть 0)
        LD DE,place     ; положение символа: D - вертикаль, E - горизонталь
        LD B,sym_zg     ; знакогенератор
        LD L,symbol     ; символ
        LD H,atribute   ; атрибут символа
        LD C,0B5h       ; номер функции
        CALL 3D13h      ; NC -> нормальное завершение
                        ; CF -> ошибка неверный идентификатор окна

WIN_SET_ZG:             ; установка знакогенератора
        LD A,sym_zg     ; системный номер знакогенератора
        LD DE,zg_form   ; указатель на 2Kb данных знакогенератора
; Данные знакогенератора должны располагаться в таком виде, в каком они
; выглядели бы как набор символов на спектрумовском экране при переносе 2Kb
; LDIR-om в адрес 4000h
; * В будущем возможно изменение этого расположения на обычное
        LD C,0B6h       ; номер функции
        CALL 3D13h      ; NC -> завершение
                        ; CF -> ошибка (старая версия, нет функции)

WIN_MOVE_WIN:           ; перемещение окна
        LD A,(id_win)   ; идентификатор глобального окна (пока должен быть 0)
        LD H,ver_size   ; HL - размер локального окна вертикаль/горизонталь
        LD L,hor_size   ; размер в символах
        LD D,ver_place  ; DE - положение локального окна
        LD E,hor_place  ; положение по горизонтали в символах
        LD IX,new_place ; новое положение локального окна
        LD C,0B2h       ; номер функции
        CALL 3D13h      ; NC -> нормальное завершение
                        ; CF -> ошибка - неверный идентификатор окна
; при работе этой функции через RST 18h или RST 8, обязательна установка
; DI, так как функция пользуется стеком для ускорения работы.

; Даллее следуют функции печати для работы с _текущим_ глобальным окном.
; В данный момент текущим всегда является последнее открытое окно
; На графическом экране функция не работает

LP_PRINT_ALL:           ; печать символов с атрибутом
        LD A,symbol     ; символ
        LD E,atribute   ; атрибут
        LD B,num_sym    ; число выводимых символов
        LD C,081h       ; номер функции
        CALL 3D13h      ; на экран выводится строка из B одинаковых
                        ; символов
                        ; регистры HL,IX - сохраняются

LP_PRINT_SYM:           ; Вывод символов на экран с текущего
                        ; знакоместа без атрибута
        LD A,symbol     ; символ
        LD B,num_sym    ; число выводимых символов
        LD C,082h       ; номер функции
        CALL 3D13h      ; на экран выводится строка из B одинаковых символов
                        ; атрибут остается тот, который был на экране
                        ; регистры HL,IX - сохраняются

LP_PRINT_ATR:           ; печать атрибутов
        LD E,atribute   ; атрибут
        LD B,num_sym    ; число выводимых символов
        LD C,083h       ; номер функции
        CALL 3D13h      ; на экран выводится строка из B одинаковых
                        ; атрибутов. Символы не меняются.
                        ; регистры HL,IX - сохраняются

LP_SET_PLACE:           ; Установка текущего знакоместа в окне
        LD E,hor_place  ; номер символа по горизонтали
        LD D,ver_place  ; номер символа по вертикали
                        ; ** Превышение границ приводит не к ошибке, а к
                        ; переустановке сначала, за вычетом полного
                        ; размера окна
        LD C,084h       ; номер функции
        CALL 3D13h      ; позиция печати устанавливается в соответстии с
                        ; регистром DE

LP_PRINT_LN:            ; Вывод строки символов на экран с текущего
                        ; знакоместа
        LD HL,line_adr  ; адрес строки. Должен быть между 04000h и 0BFFFh
        LD E,atribute   ; атрибут, с которым будет выведена строка
        LD B,num_sym    ; длина выводимой строки
        LD C,085h       ; номер функции
        CALL 3D13h      ; "исполнение желаний"


LP_PRINT_LN2:           ; Вывод строки символов на экран с текущего
                        ; знакоместа без атрибутов
        LD HL,line_adr  ; адрес строки. Должен быть между 04000h и 0BFFFh
        LD B,num_sym    ; длина выводимой строки
        LD C,086h       ; номер функции
        CALL 3D13h      ; строка будет выведена без изменения атрибутов в
                        ; месте печати


LP_PRINT_LN3:           ; Вывод строки символов на экран с текущего
                        ; знакоместа до разделителя. После разделителя
                        ; выводятся пробелы что бы вывести B символов
        LD HL,line_adr  ; адрес строки. Должен быть между 04000h и 0BFFFh
        LD E,atribute   ; атрибут, с которым будет выведена строка
        LD D,delimiter  ; разделитель
        LD B,num_sym    ; длина выводимой строки
        LD C,087h       ; номер функции
        CALL 3D13h      ; символы из (HL) выводятся на экран, пока не
                        ; встретится символ равный D, далее печатаются
                        ; пробелы, как дополнение строки до B символов


LP_PRINT_LN4:           ; Вывод строки символов длиной B на экран с текущего
                        ; знакоместа до разделителя D, без атрибутов.
        LD HL,line_adr  ; адрес строки. Должен быть между 04000h и 0BFFFh
        LD D,delimiter  ; разделитель
        LD B,num_sym    ; длина выводимой строки
        LD C,088h       ; номер функции
        CALL 3D13h      ; символы из (HL) выводятся на экран, пока не
                        ; встретится символ равный D, далее печатаются
                        ; пробелы, как дополнение строки до B символов
                        ; атрибуты не изменяются

LP_CLS_WIN:             ; очистка экрана
        LD DE,place     ; положение локального окна (глобальное = текущее)
        LD H,ver_size   ; HL - размер локального окна вертикаль/горизонталь
        LD L,hor_size   ; размер в символах
        LD B,atribute   ; атрибут очистки
        LC C,089h       ; номер фунции
        CALL 3D13h      ; выполнение. Произворится выводом пробелов с
                        ; заданным атрибутом


LP_SCROLL_UD:           ; Скроллинг части глобального окна вверх/вниз
        LD B,scroll_type; тип скроллинга 1 - вверх/ 2 - вниз
        LD D,beg_line   ; начальная строка скроллинга
        LD E,num_lines  ; число скроллируемых строк
        LD C,08Ah       ; номер функции
        CALL 3D13h      ; выполнение. Скроллируются полные строки
                        ; глобального окна


LP_PRINT_LN5:           ; Вывод строки символов на экран с текущего
                        ; знакоместа до разделителя после разделителя
                        ; вывод останавливается
        LD HL,line_adr  ; адрес строки. Должен быть между 04000h и 0BFFFh
        LD E,atribute   ; атрибут, с которым будет выведена строка
        LD B,num_sym    ; максимальная длина выводимой строки
        LD C,08Bh       ; номер функции
        CALL 3D13h      ; символы из (HL) выводятся на экран, пока не
                        ; встретится символ равный D или количество
                        ; символов не превысило B. Далее происходит
                        ; возврат


LP_PRINT_LN6:           ; Вывод строки символов на экран с текущего
                        ; знакоместа до разделителя после разделителя
                        ; вывод останавливается, без атрибутов
        LD HL,line_adr  ; адрес строки. Должен быть между 04000h и 0BFFFh
        LD B,num_sym    ; максимальная длина выводимой строки
        LD C,08Ch       ; номер функции
        CALL 3D13h      ; символы из (HL) выводятся на экран, пока не
                        ; встретится символ равный D или количество
                        ; символов не превысило B. Далее происходит
                        ; возврат. Атрибуты не выводятся

LP_CLS_WIN2:            ; очистка экрана, указанием символа заполнения
        LD DE,place     ; положение локального окна (глобальное = текущее)
        LD H,ver_size   ; HL - размер окна вертикаль/горизонталь
        LD L,hor_size   ; размер в символах
        LD A,symbol     ; символ очистки
        LD B,atribute   ; атрибут очистки
        LC C,08Dh       ; номер фунции
        CALL 3D13h      ; Выполнение. Произворится выводом пробелов с
                        ; заданным атрибутом и символом

LP_GET_PLACE:           ; получить текущее положение вывода на экран
                        ; в глобальном окне
        LD C,08Eh       ; номер функции
        CALL 3D13h      ; в регистр DE будут положены координаты,
                        ; в которых будет напечатан следующий символ
                        ; D - вертикаль, E - горизонталь

;       Графические функции

;       координаты считаются от верхнего левого угла экрана

PIC_POINT:              ; установить точку
        LD DE,Y_coord   ; координата по вертикали
        LD HL,X_coord   ; координата по горизонтали
        LD A,(id_win)   ; идентификатор граф. окна (пока должен быть 0)
        LD B,color      ; цвет точки
        LD C,0A1h       ; номер функции
        CALL 3D13h      ; поставить точку

; В действительности ставить точки на экране с помощью функции биоса,
; слишком медленно. Для этого лучше пользоваться прямым выводом данных
; на графический экран. Устройство экрана и способы прямого вывода
; графических данных описаны в файле архитектуры Спринтера.


PIC_SET_PAL:            ; установка палитры
        LD HL,pal_data  ; данные палитры:
                        ; список цветов по четыре байта B,G,R,Y
        LD E,beg_color  ; начальный цвет
        LD D,num_colors ; количество устанавливаемых цветов
        LD B,pal_mask   ; маска при установке палитры. Для нормального
                        ; режима должнa быть FF
        LD A,page_pal   ; номер палитры 0..15 значения от 8 до 15 резервные
        LD C,0A4h       ; номер функции
        CALL 3D13h      ; установка палитры

; данные палитры должны представлять собой список приблизительно такого вида:
        DB blue1,green1,red1,0
        DB blue2,green2,red2,0
        .....................
        DB blueN,greenN,redN,0
; N = num_colors. Значение num_colors равное 0 соответствует 256-ти цветам
; при записи в видео-ОЗУ все данные предварительно проходят функцию AND со
; значением pal_mask

; Страницы палитры 0..3 соответствуют графическим режимам. Для вывода в
; соответствующей палитре нужно задать соответствующее значение bit7..6 в
; байте режима знакоместа

; Страницы 4..7 соответствуют текстовому режиму и режиму "Спектрум"
; В странице 4 задается цвет paper для каждого атрибута. В странице 5
; задается цвет ink для каждого атрибута.
; В странице 6 задается цвет paper, которым он будет моргать в режиме flash
; В странице 7 задается цвет ink, которым он будет моргать в режиме flash
; Таким образом, для каждого из 256-ти атрибутов задается четыре цвета
; если цвета 4,5 совпадают с цветами 6,7 то режим flash оказывается
; отключенным. Для его включения в спектрумовском режиме надо поменять
; местами цвета 6 и 7. Если надо включить flash в режим IBM-CGA, следует
; установить цвета 6 и 7 одинаковыми и равными цвету 4
; по сути режим flash всегда включен и на экране постоянно меняются цвета
; paper с 4-го на 6-й, а цвета ink с 5 на 7-й. Если эти пары цветов для
; атрибута знакоместа устанавливаются одинаковыми, то flash в этом месте
; не виден.
; Используя подобное задание цветов текстового режима можно легко добиться
; совместимости по цветам как со Спектрумом, так и с IBM

        6. Работа с винчестером и дисками MS-DOS

HDD_INIT:               ; инициализация винчестера
        LD C,040h       ; номер функции
        CALL 3D13h      ; NC -> нормальное завершение
                        ; CF -> винчестер не найден

HDD_RECAL:              ; рекалибровка винчестера
        LD C,041h       ; номер функции
; * Функция зарезервирована для дальнейшего использования

HDD_TEST_IDE:           ; Тест наличия интерфейса IDE
        LD C,042h       ; номер функции
        CALL 3D13h      ; NC -> нормальние завершение
                        ;   в регистре A информация о наличии устройств
                        ;   bit0=1 - есть устройство "master"
                        ;   bit1=1 - есть устройство "slave"
                        ; CF -> ошибка, аппаратная неисправность

HDD_PREPARE:            ; подготовка винчестера к операции чтения/записи
        LD C,043h       ; номер функции
        LD HL,bufer_adr ; адрес буфера данных
        LD A,bufer_page ; страница буфера, если адрес в окне 0C000h
        LD B,sec_num    ; число секторов
        LD DE,sec_low   ; абсолютный номер сектора младшая часть
        LD IX,sec_high  ; абсолютный номер сектора старшая часть
        CALL 3D13h      ; При исполнении производится вся подготовка к
                        ; операциям чтения/записи вычисление
; цилиндров/головок/секторов и занесение их в регистры винчестера
; далее программа может сама только подать команду читать/писать и
; замостоятельно производить считывание/запись данных в винчестер.
; Команда удобна для работы программ в реальном времени, когда необходимо
; кроме чтения/записи данных производить какие либо иные действия.

HDD_READ_BPB:           ; читать BPB
        LD C,044h       ; номер функции
        LD HL,bufer_adr ; адрес буфера для BPB
        LD A,bufer_page ; страница буфера, если адрес в окне 0C000h
        CALL 3D13h      ; NC -> нормальное завершение
                        ; CF -> ошибка

HDD_READ:               ; читать сектора с винчестера
        LD C,045h       ; номер команды
        LD HL,bufer_adr ; адрес буфера данных
        LD A,bufer_page ; страница буфера, если адрес в окне 0C000h
        LD B,sec_num    ; число читаемых секторов
        LD DE,sec_low   ; абсолютный номер сектора младшая часть
        LD IX,sec_high  ; абсолютный номер сектора старшая часть
        CALL 3D13h      ; NC -> нормальное завершение
                        ; CF -> ошибка

; ** При попадании межсекторного промежутка на адрес 0000h
; производится автоматическое переключение страницы ОЗУ по
; RAM Allocation Table.

HDD_WRITE:              ; писать сектора на винчестер
        LD C,046h       ; номер команды
        LD HL,bufer_adr ; адрес буфера данных
        LD A,bufer_page ; страница буфера, если адрес в окне 0C000h
        LD B,sec_num    ; число записываемых секторов
        LD DE,sec_low   ; абсолютный номер сектора младшая часть
        LD IX,sec_high  ; абсолютный номер сектора старшая часть
        CALL 3D13h      ; NC -> нормальное завершение
                        ; CF -> ошибка

; ** При попадании межсекторного промежутка на адрес 0000h
; производится автоматическое переключение страницы ОЗУ по RAM
; Allocation Table.

HDD_PART:               ; настройка партиций и master/slave
        LD C,047h
; * функция зарезервирована

; В ближайшее время в описание биоса будут добавлены функции работы с FDD и
; CD-ROM
; * В данный момент они имеются, но предполагается их серьезная переделка.
; Некоторые функции зарезервированы для дальнейшего развития. Так же не
; описана часть графических функций, так как они в данный момент подвергаются
; серьезным переделкам.

        LD C,50H        ; зарезервирована

DRV_RESET:              ; Сброс контроллера и настройка на диск
        LD A,drv_type   ; бит 0..3 - номер устройства
                        ; бит 4..7 - тип устройства
                        ;     0 - дисковод
                        ;     6 - ram-disk
                        ;     8 - HDD
                        ;     C - CD-ROM
                        ; остальные номера резервные
        LD C,51h        ;
        CALL 3D13H      ; NC - нормальное завершение
                        ; CF - нет диска или нет устройства

        LD C,52h        ; зарезервировано
        LD C,53h        ; зарезервировано

DRV_VERIFY:             ; проверка секторов
        LD A,drv_type   ; бит 0..3 - номер устройства
                        ; бит 4..7 - тип устройства
                        ;     0 - дисковод
                        ;     6 - ram-disk
                        ;     8 - HDD
                        ;     C - CD-ROM
        LD HL,sec_h     ; страшая часть номера сектора
        LD IX,sec_l     ; младшая часть номера сектора
        LD B,n_sec      ; количество секторов
        LD C,54h        ;
        CALL 3D13h      ; NC - нормальное завершение
                        ; CF - проверка с ошибкой или нет устройства

DRV_READ:               ; чтение с устройства
        LD A,drv_type   ; бит 0..3 - номер устройства
                        ; бит 4..7 - тип устройства
                        ;     0 - дисковод
                        ;     6 - ram-disk
                        ;     8 - HDD
                        ;     C - CD-ROM
        LD HL,sec_h     ; страшая часть номера сектора
        LD IX,sec_l     ; младшая часть номера сектора
        LD B,n_sec      ; количество секторов
        LD DE,bufer_adr ; адрес буфер для чтения
        LD C,55h        ;
        CALL 3D13h      ; NC - нормальное завершение
                        ; CF - ошибка чтения или нет устройства

DRV_WRITE:              ; запись на устройства
        LD A,drv_type   ; бит 0..3 - номер устройства
                        ; бит 4..7 - тип устройства
                        ;     0 - дисковод
                        ;     6 - ram-disk
                        ;     8 - HDD
                        ;     C - CD-ROM
        LD HL,sec_h     ; страшая часть номера сектора
        LD IX,sec_l     ; младшая часть номера сектора
        LD B,n_sec      ; количество секторов
        LD DE,bufer_adr ; адрес буфер для чтения
        LD C,56h        ;
        CALL 3D13h      ; NC - нормальное завершение
                        ; CF - ошибка чтения или нет устройства

DRV_DETECT:             ; определение параметров устройства
        LD A,drv_type   ; бит 0..3 - номер устройства
                        ; бит 4..7 - тип устройства
                        ;     0 - дисковод
                        ;     6 - ram-disk
                        ;     8 - HDD
                        ;     C - CD-ROM
        LD C,57h        ;
        CALL 3D13h      ; NC - нормальное завершение
                        ;      A - bit7 - 0 диск 720Кb
                        ;                 1 диск 1.44Mb
                        ; CF - нет устройства или нет носителя

DRV_GET_PAR:            ; получить параметры носителя
        LD A,drv_type   ; бит 0..3 - номер устройства
                        ; бит 4..7 - тип устройства
                        ;     0 - дисковод
                        ;     6 - ram-disk
                        ;     8 - HDD
                        ;     C - CD-ROM
        LD C,58h        ;
        CALL 3D13h      ; NC - нормальное завершение
                        ;    L - число секторов
                        ;    H - число головок
                        ;    DE - количество цилиндров
                        ;    IX - размер сектора в байтах
                        ;    B - доп. параметры
                        ;       для дискет бит7 - тип 1.44/720
                        ; если в HL,DE все FF - устройства нет
                        ; CF - нет устройства

DRV_SET_PAR:            ; установить параметры носителя
        LD A,drv_type   ; бит 0..3 - номер устройства
                        ; бит 4..7 - тип устройства
                        ;     0 - дисковод
                        ;     6 - ram-disk
                        ;     8 - HDD
                        ;     C - CD-ROM
        LD L,n_secs     ;    L - число секторов
        LD H,n_heads    ;    H - число головок
        LD DE,n_cyls    ;    DE - количество цилиндров
        LD IX,sec_size  ;    IX - размер сектора в байтах
        LD B,ext_par    ;    B - доп. параметры
                        ;       для дискет бит7 - тип 1.44/720
        LD C,59h        ;
        CALL 3D13h      ; NC - нормальное завершение


; Функции не отмеченные как зарезервированные, старые или тестируемые,
; меняться скорее всего не будут.

