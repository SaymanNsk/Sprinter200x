;********************************************************
; DEMO (c) Ivan Mak
;********************************************************
;
; Скроллинг полноэкранной картинки
; с помощью функций установки режима экрана
;
;********************************************************
; Программа размещается в .trd файле, как кодовый
; блок, запускаемый по адресу 8000h
; В этом же .trd файле начиная с сектора #50
; (смещение от начала 05000h) располагается BMP файл
; размером 512x256 пикселей с 256 цветами на точку
;********************************************************
; Действие программы:
; Выводится BMP файл и скроллируется вверх/вниз,
; влево/вправо со скоростью 50 кадров в секунду,
; 1 знакоместо на фрейм
;********************************************************
	.Z80
	ASEG
	.RADIX 10
	ORG 100H
        .PHASE 8000H

	INCLUDE SPRINT01.ASZ

SYS_PAGE	EQU 0FEH

PAGE0   EQU 082H
PAGE1   EQU 0A2H
PAGE2   EQU 0C2H
PAGE3   EQU 0E2H

BORDER  EQU 0FEH
RGADR   EQU 089H
RGSCR   EQU 0E9H
RGMOD   EQU 0C9H
RGACC   EQU 0A9H

START_BYTE MACRO	; макрос открытия страниц RAM-Disk-а
	LD A,SYS_PAGE
	OUT (PAGE3),A

        LD A,(CP_PAGE3)	; текущая страница вывода
	LD H,0C2H	; FAT_RAM-Disk !!!
	LD L,A
	LD L,(HL)

        OUT (PAGE3),A	; открыть с 0C000h
	LD A,L
	OUT (PAGE0),A	; открыть с 00000h
        LD HL,(COPY_ADR3) ; текущий адрес данных
	LD A,1
	OUT (0FDh),A
        ENDM

END_BYTE MACRO		; макрос закрытия страниц RAM-Disk-а
        LD A,0
	OUT (0FDh),A
	OUT (PAGE3),A	; закрыть 0C000h
	OUT (PAGE0),A	; закрыть 00000h
        LD (COPY_ADR3),HL ; запомнить адрес данных
        ENDM


CONT_SEC	EQU 5CF4H

START:
        JP BEGIN

PAL_PLACE:	DB 00H
PIC_START:	DW 4040H
COPY_ADR3:      DW 0C000H
CP_PAGE3:       DB 10H
PIC_TRK_SEC:	DW 0050h

SAV_SP:		DW 0

BEGIN:
	LD (SAV_SP),SP

	DI
	LD SP,0BFFFH

	LD C,0F1H	; Sprinter-2
	CALL 3D13H

	CALL READ_DATA_TO_SCR	; считать данные на экран

M_LOOP:

	IN A,(RGMOD)	; считать номер показываемого экрана
	AND 1
	LD E,11H	; флаги вывода для экрана 1
	JR NZ,NO_10H
	LD E,0		; флаги вывода для экрана 0
NO_10H:
	LD HL,0
	LD IX,TABLE
	LD C,0B0H
	CALL 3D13H	; вызвать функцию открытия режима

	EI              ; ждать прерывание
	HALT
	DI

	IN A,(RGMOD)	; переключить режим
	XOR 1
	OUT (RGMOD),A

	LD IX,TABLE	; таблица режима экрана

; программа изменения таблицы режима
; для получения скроллинга картинки
ADD1:	LD A,1		; скорость движения по горизонтали
	ADD A,(IX+6)	; изменить положение данных по горизонтали
	LD (IX+6),A	; проверить положение по горизонтали
	CP 8
	JR NZ,NO_1
	LD A,1		; если левая граница изменить скорость на 1
	LD (ADD1+1),A
NO_1:
	CP 31
	JR NZ,NO_M1
	LD A,-1		; если правая граница изменить скорость на -1
	LD (ADD1+1),A
NO_M1:

ADD2:	LD A,1		; скорость движения по вертикали
	ADD A,(IX+7)	; изменить положение по вертикали
	LD (IX+7),A

	CP 0		; проверить положение по вертикали
	JR NZ,NO_2
	LD A,1		; если верхняя граница, изменить скорость на 1
	LD (ADD2+1),A
NO_2:
	CP 31
	JR NZ,NO_M2
	LD A,-1		; если нижняя граница изменить скорость на -1
	LD (ADD2+1),A
NO_M2:
	JP M_LOOP       ; цикл

READ_DATA_TO_SCR:
	CALL RETI_PROG		; разблокировать акселератор

	LD DE,(PIC_TRK_SEC)	; сектор, с которого начинается картинка
	LD A,0			; номер RAM-Disk-а (E:)
	LD C,RAMD_CALC_PAGE	; функция рассчета адреса и страницы данных
	CALL 3D13H		; в RAM-Disk-е.
        LD (COPY_ADR3),HL	; запомнить адрес
	LD (CP_PAGE3),A		; и страницу

	START_BYTE		; открыть страницы RAM-Disk-а
        LD BC,36H		; проскипать заголовок BMP файла
	ADD HL,BC
	END_BYTE		; закрыть страницы RAM-Disk-а

	LD DE,0B800h		; в адрес B800h
	LD BC,400H
	CALL READ_DATA		; Считать из RAM-Disk-а 400h байт

        LD B,0FFh		; палитру с маской FF
	LD HL,0B800H		; из адреса B800h
	LD DE,0			; с нулевого цвета, 256 цветов
	LD C,CMD_SET_PAL	;
	LD A,(PAL_PLACE)	; номер из адреса PAL_PLACE
	CALL 3D13H		; установить!

        CALL SET_SCR		; считать данные из RAM-Disk-а в экран

        RET
RETI_PROG:
	RETI

;*********************************************
SET_SCR:
        LD DE,(PIC_START)
	LD A,0FFH	; номер строки вывода
	EX AF,AF'	; СПРЯТАТЬ СТРАНИЦУ

        START_BYTE	; открыть страницы RAM-Disk-а
	LD A,50H	; установить вывод в экран с адреса 4000h
	OUT (PAGE1),A

	EX AF,AF'
	OUT (RGADR),A	; установить номер линии
	EX AF,AF'

	LD D,D		; акселератор включить в режим задания числа байтов
        LD B,0		; 256 байт
	LD B,B		; акселератор отключить

SET_SCR_LOOP:
	LD L,L		; акселератор включить в режим копирования линий
	LD A,(HL)	; считать линию
	LD (DE),A	; записать линию
	INC H		; увеличить адрес данных на 256
	INC D		; увеличить адрес в экране на 256
	LD A,(HL)	; продолжить копирование
	LD (DE),A	; линии
	INC H		; увеличить адрес данных на 256
	DEC D		; вернуть! адрес линии в экране
	LD B,B		; отключить акселератор

	BIT 7,H		; проверить, не произошел ли уход в страницу 0
	CALL Z,NEXT_H2	; если дам то дополнительно исполнить
	EX AF,AF'
	DEC A           ; уменьшить номер линии
	OUT (RGADR),A	; и установить новый номер
	EX AF,AF'
        DJNZ SET_SCR_LOOP ; повторять 256 раз

	LD A,0
	OUT (RGADR),A	; номер линии в 0
	LD A,05H
	OUT (PAGE1),A	; вернуть номер страницы #4000h

        END_BYTE	; закрыть страницы RAM-Disk-а
        EX AF,AF'
	RET


NEXT_H2:
	set 7,h
	set 6,h
;*********************************
	PUSH HL	; адрес на следующей странице
	LD A,SYS_PAGE	; системная страница
	OUT (PAGE3),A

; Получить номер следующей страницы
        LD A,(CP_PAGE3)
	LD H,0C2H	; FAT_RAM-Disk !!!
	LD L,A
	LD A,(HL)
        LD (CP_PAGE3),A
	LD L,A
	LD L,(HL)

; и установить новые страницы
        OUT (PAGE3),A
	LD A,L
	OUT (PAGE0),A
	POP HL
	RET

;***************************************
READ_DATA:
	START_BYTE	; открыть данные RAM-Disk-а
	LDIR		; копировать
	BIT 7,H		; проверить, не зашли ли за границу 0
	CALL Z,NEXT_H2	; если да, то дополнительно исполнить
	END_BYTE	; закрыть данные RAM-Disk-а
	RET

TABLE:				; данные режима экрана
	DB 40,32,0,0,20H,0,8,0  ; значащие байты
	DS 24			; 24 пустых байта

;***********************************************
program_end:
;***********************************************
;	DB 'BLK_START'
;***********************************************
	DS START+06F0H-$
	DB "flc     C",0,80h,0,7,7,1,1

BLK_START:
	DS START+0700H-$
	END
;***********************************************
