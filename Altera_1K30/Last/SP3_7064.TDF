
TITLE "SINC_controller";

SUBDESIGN SP3_7064
	(

	TG42_IN		: INPUT;
	TG42_OUT	: OUTPUT;
	TG42_BUF	: OUTPUT;
	CLKZZ		: BIDIR;
	CLK14		: OUTPUT;

	AUD			: OUTPUT;	-- clk for timers
	BEEP		: OUTPUT;

	CMOS_DRD	: OUTPUT;
	CMOS_AS		: OUTPUT;
	CMOS_DWR	: OUTPUT;

	WR_PDOS		: OUTPUT;
	WD			: INPUT;
	WSTB		: INPUT;
	SR,SL		: INPUT;
	RSTB		: INPUT;
	TR43		: INPUT;
	CLK_WG		: OUTPUT;
	FDAT		: OUTPUT;
	QDAT		: OUTPUT;
	RDAT		: INPUT;
	/WG_WR		: OUTPUT;
	/WG_RD		: OUTPUT;
	STE			: INPUT;
	DENS_X		: OUTPUT;
	WDAT		: OUTPUT;


--	XA[2..0]	: BIDIR;
	XA[2..0]	: INPUT;
	XACS		: INPUT;
	SINC_[2..1]	: OUTPUT;

	HDD_C[3..0]	: INPUT;
	FDD_C[2..0]	: INPUT;

	HD_DIR		: OUTPUT;
	HD_CS		: OUTPUT;

	/CONF_X		: BIDIR;
	10K_CLK		: OUTPUT;
	WR_CNF		: INPUT;
	10K_D0		: OUTPUT;
	D0			: INPUT;

	VGA_IN		: INPUT;
--	WR_COL		: INPUT;
	SINC_V		: OUTPUT;
	SINC_H		: OUTPUT;
	SINC		: OUTPUT;
	SINC_IN		: INPUT;

	XHD_RES		: OUTPUT;
	XHD_WR		: OUTPUT;
	XHD_RD		: OUTPUT;

	XHD1_CS[2..1]	: OUTPUT;
	XHD2_CS[2..1]	: OUTPUT;
	XHR_RDY		: INPUT;

	EPM_RES		: INPUT;
	PW_GOOD		: INPUT;

	GND65		: INPUT;
	GND33		: INPUT;

	)
VARIABLE

	XCT[2..0]	: DFF;
	CNF_ON		: NODE;

	CLK42		: NODE;

	CT[5..0]	: DFF;
	CTH[5..0]	: DFF;
	CTV[8..0]	: DFFE;

	SINC_HT		: DFF;
	SINC_VT		: DFFE;

	TURBING		: NODE;
	FDD_1440	: NODE;
	NFDD_1440	: NODE;

	CT_WG		: NODE;
	CT_WG1		: NODE;

	CLK_PRC		: NODE;
	WGR[4..0]	: DFF;
	RDAT_X		: NODE;

	REG_P[3..0]	: DFF;

	/RESET		: NODE;


	S144,S720	: NODE;

	SHDD1,SHDD2	: NODE;
	THDD		: NODE;
	NTHDD		: NODE;

	S320,S312	: NODE;
	T320		: NODE;
	NT320		: NODE;

	SOFT_RESET	: NODE;

BEGIN

	/RESET		= (EXP(!EPM_RES & EXP(EXP(EXP(EPM_RES)))) & SOFT_RESET);

	TG42_OUT	= LCELL(EXP(TG42_IN));
	TG42_BUF	= LCELL(EXP(TG42_IN));

	CLK42		= TG42_IN;

	CT[].clk	= CLK42;
	CASE CT[4..0] IS
		WHEN 0,1,2,3,4,5,6,7,8,9 => CT[4..0] = CT[4..0] + 1; CT5 = CT5;
		WHEN 10					 => CT[4..0] = 16;           CT5 = CT5;
		WHEN 11,12,13,14,15		 => CT[4..0] = CT[4..0] + 1; CT5 = CT5;
		WHEN 16,17,18,19,20,21   => CT[4..0] = CT[4..0] + 1; CT5 = CT5;
		WHEN 22,23,24,25 		 => CT[4..0] = CT[4..0] + 1; CT5 = CT5;
		WHEN 26					 => CT[4..0] = GND;          CT5 = !CT5;
		WHEN 27,28,29,30,31	     => CT[4..0] = CT[4..0] + 1; CT5 = CT5;
	END CASE;

--	CT4 - 2 MHZ, CT5 - 1MHz

--	=== horizontal sinc =====

	CTH[].clk	= !CT5; 	 -- 1MHz
	CTH[]		= CTH[] + 1; -- 64mks
	SINC_HT.clk = !CT5;

	SINC_HT.d	= (CTH[] == B"1101XX");

	SINC_H		= SINC_HT;

--  === vertical sinc =======

	CTV[].clk	= !CT5;
	SINC_VT.clk	= !CT5;

	CTV[].ena	= (CTH[] == B"110111");
	SINC_VT.ena	= (CTH[] == B"110111");

	IF ((CTV[] == B"XXXXXXX11") & SINC_VT) THEN
		CTV[]	= GND;
	ELSE
		CTV[] = CTV[] + 1;
	END IF;

	SINC_VT.d	= (CTV[] == B"1001111XX") or ((CTV[] == B"1001101XX") & NT320);

	SINC_V		= SINC_VT;

	SINC		= SINC_V xor SINC_H;

	SINC_1		= CTH5;
	SINC_2		= CTV8;

--  =============================

--  =========================================
--	divide by 6

	XCT[].clk	= (TG42_IN xor !XCT1);
	XCT[].d		= XCT[] + 1;

--	CLKZZ = 14 MHz

	CLKZZ		= TRI(XCT1,!CNF_ON);
	CLK14		= DFF(!CLK14,XCT0,,);

--	test exists

--	CNF_ON	= EXP(EXP(CNF_ON & /RESET) & XACS);

	CNF_ON	= DFF(GND,GND,/RESET,XACS);

--	=========================================

--	========	FDD controller	==================


	TURBING		= DFF(!(!(TURBING & !WSTB & !RSTB) & !STE & NFDD_1440),!CT5,,);
	CLK_WG		= DFF((CT5 & !TURBING or CT4 & TURBING),CLK42,,);

	CT_WG		= TFF(VCC,(XCT1 xor (CT_WG & TURBING)),,);
	CLK_PRC		= CT_WG;


--	CT_WG1		= EXP(EXP(XCT1 & FDD_1440) & EXP(CT0 & NFDD_1440));

	CT_WG1		= TFF(VCC,(XCT1 xor (CT_WG1 & FDD_1440)),,);

	WGR[].clk	= CT_WG1;
	IF !RDAT THEN
		TABLE WGR[3..0] => WGR[3..0].d;
			0 => 4; 1 => 5; 2 => 4; 3 => 5;
			4 => 6; 5 => 7; 6 => 8; 7 => 8;
			8 => 9; 9 => 9; 10 => 10; 11 => 11;
		   12 => 12; 13 => 13; 14 => 14; 15 => 15;
		END TABLE;
		WGR4.d	= WGR4;
	ELSE
		IF WGR[3..0] == 0 THEN
			WGR[3..0].d		= 3;
			WGR4.d			= WGR4;
		ELSE
			WGR[].d			= WGR[] + 1;
		END IF;
	END IF;

	QDAT	= WGR4;
	RDAT_X	= EXP(EXP(RDAT_X & EXP(!RDAT & !CT_WG1)) & EXP(RDAT & !CT_WG1));
	FDAT	= DFF((RDAT_X or !DFF(RDAT_X,CT_WG1,,)),CT_WG1,,);
--	==========================================================
--	now not complete!

	AUD		= CT5;

	BEEP	= GND;
	/CONF_X	= TRI(GND,!/RESET);

	10K_CLK		= WR_CNF;	-- now not protect!

	10K_D0		= DFFE(D0,WR_CNF,S720,(S144 & /RESET),!CNF_ON);

	DENS_X		= VCC;

--	=== now NOT PRECOMP! =====

	WDAT		= WD;

--	WDAT = REG_P3;

	REG_P[].clk	= !CLK_PRC;

--	CASE WD IS
--		WHEN 1 => REG_P[].d	= (GND,SL,!(SL or SR),SR);
--		WHEN 0 => REG_P[].d = (EXP(EXP(REG_P2)),REG_P[1..0],GND);
--	END CASE;

--	CASE (DFF(WD,CLK_WG,,),DFF((SL & TR43),CLK_WG,,),DFF((SR & TR43),CLK_WG,,)) IS

	CASE (DFF((WD & EXP(SL & TR43)),CLK_WG,,),DFF((WD & EXP(SR & TR43)),CLK_WG,,)) IS
		WHEN 0 => REG_P[1..0] = (REG_P[1..0] - 1) & EXP(REG_P[1..0] == 0);
						REG_P[3] = EXP(EXP(REG_P[1..0] == 1));
		WHEN 1 => REG_P[1..0] = 1; REG_P[3] = GND;
		WHEN 2 => REG_P[1..0] = 3; REG_P[3] = GND;
		WHEN 3 => REG_P[1..0] = 2; REG_P[3] = GND;
	END CASE;
%
	CASE (WD,DFF((SL & TR43),CLK_WG,,),DFF((SR & TR43),CLK_WG,,)) IS
		WHEN B"0XX" => REG_P[1..0] = (REG_P[1..0] - 1) & EXP(REG_P[1..0] == 0);
		WHEN B"100" => REG_P[1..0] = 2;
		WHEN B"110" => REG_P[1..0] = 1;
		WHEN B"101" => REG_P[1..0] = 3;
		WHEN B"111" => REG_P[1..0] = 2;
	END CASE;
%
	REG_P2 = GND;
%
	CASE WD IS
		WHEN 0 => REG_P[3] = EXP(EXP(REG_P[1..0] == 1));
		WHEN 1 => REG_P[3] = GND;
	END CASE;
%

--	=== Port Controls ====================================
%
	FDD_C0	- 0 - WG93	/ 1 - kmps/ p_dos
	FDD_C1	- 0 - write / 1 - read
	FDD_C2	- 0 - no	/ 1 - CS_WG/ strobe

	HDD_C0	- strobe
	HDD_C[2..1] = 00 - no, 01 - HDD1, 10 - HDD2, 11 - CMOS
	HDD_C3	- 0 - HD_CS1,  1 HD_CS3 / 0 CMOS_DAT,  1 - CMOS_ADR

	HDD_C[3..0] = 0001, FDD_C[2..1] = 00; -> FDD_C0 = 1/0 -> set 1.44/720
	HDD_C[3..0] = 1001, FDD_C[2..1] = 00; -> FDD_C0 = 1/0 -> set 320/312 lines
	HDD_C[3..0] = 0011, FDD_C[2..1] = 00; -> FDD_C0 = 1/0 -> set HDD1/HDD2 ??
	HDD_C[3..0] = 1011, FDD_C[2..1] = 00; -> FDD_C0 = 0 -> soft_reset!

%

	SOFT_RESET	= EXP((HDD_C[] == B"1011") & (FDD_C[] == B"000"));

--	FDD switch

--	NFDD_1440	= EXP(FDD_1440 & S720 & /RESET);
--	FDD_1440	= EXP(NFDD_1440 & S144);
	FDD_1440	= 10K_D0;
	NFDD_1440	= !10K_D0;

	S144		= EXP((HDD_C[] == B"0001") & (FDD_C[] == B"001"));
	S720		= EXP((HDD_C[] == B"0001") & (FDD_C[] == B"000"));

--	Screen Switch

	T320		= EXP(NT320 & S320 & /RESET);
	NT320		= EXP(T320 & S312);

	S312		= EXP((HDD_C[] == B"1001") & (FDD_C[] == B"001"));
	S320		= EXP((HDD_C[] == B"1001") & (FDD_C[] == B"000"));

--	HDD Switch

	THDD		= EXP(NTHDD & SHDD2 & /RESET);
	NTHDD		= EXP(THDD & SHDD1);

	SHDD2		= EXP((HDD_C[] == B"0011") & (FDD_C[] == B"001"));
	SHDD1		= EXP((HDD_C[] == B"0011") & (FDD_C[] == B"000"));

--	Control signals

	WR_PDOS		= !((FDD_C[] == B"101") & (HDD_C[] == 0));
	/WG_WR		= !((FDD_C[] == B"100") & (HDD_C[] == 0));
	/WG_RD		= !((FDD_C[] == B"110") & (HDD_C[] == 0));

	CMOS_DWR	= !((HDD_C[] == B"1110") & (FDD_C[] == B"101"));
	CMOS_AS		=  ((HDD_C[] == B"0110") & (FDD_C[] == B"101"));
	CMOS_DRD	= !((HDD_C[] == B"1110") & (FDD_C[] == B"110"));

	HD_DIR		= !FDD_C1; -- ????????????
--	HD_CS		= !((HDD_C[] == B"X011") or (HDD_C[] == B"X101"));
	HD_CS		= !(HDD_C[] == B"X101");

	XHD_RES		= VCC;

	XHD_WR		= HD_CS or FDD_C1;
	XHD_RD		= HD_CS or !FDD_C1;

--	XHD1_CS1 = !(HDD_C[] == B"0011");
--	XHD1_CS2 = !(HDD_C[] == B"1011");

	XHD1_CS1 = !((HDD_C[] == B"0101") & NTHDD);
	XHD1_CS2 = !((HDD_C[] == B"1101") & NTHDD);

	XHD2_CS1 = !((HDD_C[] == B"0101") & THDD);
	XHD2_CS2 = !((HDD_C[] == B"1101") & THDD);

END;

